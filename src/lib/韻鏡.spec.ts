import test from 'ava';

import { iter音韻地位 } from './資料';
import { 音韻地位 } from './音韻地位';
import { 音韻地位2韻鏡位置, 韻鏡位置 } from './韻鏡';

// 由音韻地位得出各項音韻屬性

test('使用「iter音韻地位」函式遍歷所有音韻地位可以用音韻地位從韻鏡位置還原', t => {
  const skipList = [
    '日開三祭平', // 臡，特殊字暫不處理
    '常開三祭平', // 栘，特殊字暫不處理
    '崇開三仙平', // 潺
    '溪開三B蒸平', // 硱
    '曉開三B幽平', // 烋，與「曉開三A幽平」無法區分
    '生開三鹽平', // 襳
    '定開二佳上', // 箉
    '云合三C廢上', // 倄，特殊字暫不處理
    '昌開三廢上', // 茝，特殊字暫不處理
    '以開三廢上', // 佁，特殊字暫不處理
    '崇開三臻上', // 濜
    '莊開三臻上', // 𧤛
    '初開三臻上', // 齔
    '崇合三仙上', // 撰
    '崇開三仙上', // 棧
    '明三A麻上', // 乜
    '並三A陽上', // 𩦠
    '端開二庚上', // 打，與「知開二庚上」無法區分
    '生合三祭去', // 𠻜，韻鏡無法表示
    '初合三祭去', // 㯔，韻鏡無法表示
    '見合三B祭去', // 劌
    '生開三祭去', // 㡜，韻鏡無法表示
    '疑開三B祭去', // 㓷
    '初開三臻去', // 櫬
    '初合三元去', // 𣀔
    '生合三仙去', // 𨏉
    '崇合三仙去', // 䉵
    '莊合三仙去', // 孨
    '生合三仙入', // 㕞
    '生開三仙入', // 榝
    '初合三仙入', // 㔍
    '崇開三仙入', // 𨵊
    '影開三B蒸入', // 抑，與「影開三C蒸入」無法區分
    '生開三鹽入', // 萐
    '以開三嚴入', // 殜
  ];

  for (const 當前音韻地位 of iter音韻地位()) {
    if (skipList.includes(當前音韻地位.描述)) {
      continue;
    }

    const 當前韻鏡位置 = 音韻地位2韻鏡位置(當前音韻地位);
    const recovered音韻地位 = 當前韻鏡位置.to音韻地位();

    t.true(
      recovered音韻地位.等於(當前音韻地位),
      `音韻地位 ${recovered音韻地位.描述} recovered from ${當前韻鏡位置.描述} does not equal to the original 音韻地位 ${當前音韻地位.描述}`,
    );
  }
});

test('反切', t => {
  const 反切上字音韻地位 = 音韻地位.from描述('端開一登入'); // 德
  const 反切下字音韻地位 = 音韻地位.from描述('匣一東平'); // 紅
  const 被切字音韻地位 = 音韻地位.from描述('端一東平'); // 東

  const 反切上字韻鏡位置 = 音韻地位2韻鏡位置(反切上字音韻地位);
  const 反切下字韻鏡位置 = 音韻地位2韻鏡位置(反切下字音韻地位);

  // 橫推直看
  const { 右位: 上字右位 } = 反切上字韻鏡位置;
  const { 轉號: 下字轉號, 上位: 下字上位 } = 反切下字韻鏡位置;
  const computed被切字韻鏡位置 = new 韻鏡位置(下字轉號, 下字上位, 上字右位);
  const computed被切字音韻地位 = computed被切字韻鏡位置.to音韻地位();

  t.true(
    被切字音韻地位.等於(computed被切字音韻地位),
    `被切字音韻地位應該等於計算出的被切字音韻地位, but the original is ${被切字音韻地位.描述} and the computed is ${computed被切字音韻地位.描述}`,
  );
});
